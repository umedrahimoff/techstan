#!/usr/bin/env python3
"""
Netlify Function –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import sys
import os
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def handler(event, context):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function"""
    try:
        logger.info("=== –ó–ê–ü–£–°–ö NETLIFY FUNCTION ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv('BOT_TOKEN')
        moderation_group_id = os.getenv('MODERATION_GROUP_ID')
        channel_id = os.getenv('CHANNEL_ID')
        check_interval = os.getenv('CHECK_INTERVAL', '30')
        
        logger.info(f"BOT_TOKEN: {'SET' if bot_token else 'NOT SET'}")
        logger.info(f"MODERATION_GROUP_ID: {moderation_group_id}")
        logger.info(f"CHANNEL_ID: {channel_id}")
        logger.info(f"CHECK_INTERVAL: {check_interval}")
        
        if not bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return {
                'statusCode': 500,
                'body': json.dumps({
                    'error': 'BOT_TOKEN not found in environment variables',
                    'message': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Netlify'
                })
            }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        try:
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
            src_path = os.path.join(os.path.dirname(__file__), '..', '..', 'src')
            sys.path.insert(0, src_path)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å: {src_path}")
            logger.info(f"Python path: {sys.path[:3]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            telegram_bot_file = os.path.join(src_path, 'telegram_bot.py')
            config_file = os.path.join(src_path, '..', 'config.py')
            
            logger.info(f"telegram_bot.py exists: {os.path.exists(telegram_bot_file)}")
            logger.info(f"config.py exists: {os.path.exists(config_file)}")
            
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            from telegram_bot import TelegramNewsBot
            logger.info("‚úÖ TelegramNewsBot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = TelegramNewsBot()
            logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            import asyncio
            from telegram import Bot
            
            async def send_test_message():
                try:
                    telegram_bot = Bot(token=bot_token)
                    message = f"üß™ –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n\n"
                    message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                    message += f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Netlify Functions\n"
                    message += f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
                    message += f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}"
                    
                    await telegram_bot.send_message(
                        chat_id=moderation_group_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            result = asyncio.run(send_test_message())
            
            if result:
                return {
                    'statusCode': 200,
                    'body': json.dumps({
                        'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!',
                        'timestamp': datetime.now().isoformat(),
                        'environment': {
                            'bot_token_set': bool(bot_token),
                            'moderation_group_id': moderation_group_id,
                            'channel_id': channel_id,
                            'check_interval': check_interval
                        }
                    })
                }
            else:
                return {
                    'statusCode': 500,
                    'body': json.dumps({
                        'error': 'Failed to send test message',
                        'message': '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
                    })
                }
                
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return {
                'statusCode': 500,
                'body': json.dumps({
                    'error': 'Import error',
                    'message': f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {str(e)}',
                    'python_path': sys.path[:5]
                })
            }
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {
                'statusCode': 500,
                'body': json.dumps({
                    'error': 'General error',
                    'message': f'–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
                })
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': 'Critical error',
                'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            })
        }

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    result = handler({}, {})
    print(json.dumps(result, indent=2))