const https = require('https');

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Blue Screen
async function parseBlueScreen() {
  return new Promise((resolve, reject) => {
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ Blue Screen...');
    
    const url = 'https://bluescreen.kz/';
    
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const news = extractBlueScreenNews(data);
          console.log(`‚úÖ Blue Screen: –Ω–∞–π–¥–µ–Ω–æ ${news.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);
          resolve(news);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Blue Screen:', error);
          resolve([]);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Blue Screen:', error);
      resolve([]);
    });
    
    req.setTimeout(15000, () => {
      req.destroy();
      resolve([]);
    });
  });
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Blue Screen
function extractBlueScreenNews(html) {
  const news = [];
  
  try {
    // Blue Screen —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const articleSelectors = [
      '.post',
      '.article',
      '.news-item',
      '.content-item',
      '.entry',
      '.blog-post',
      '.news-card'
    ];
    
    for (const selector of articleSelectors) {
      const regex = new RegExp(`<[^>]*class=["'][^"']*${selector}[^"']*["'][^>]*>(.*?)</[^>]*>`, 'gis');
      let match;
      
      while ((match = regex.exec(html)) !== null) {
        const articleHtml = match[0];
        const newsItem = extractNewsFromBlueScreenArticle(articleHtml);
        
        if (newsItem && newsItem.title && newsItem.title.length > 10) {
          news.push(newsItem);
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    if (news.length === 0) {
      const titleRegex = /<h[1-6][^>]*>([^<]+)<\/h[1-6]>/gi;
      let titleMatch;
      
      while ((titleMatch = titleRegex.exec(html)) !== null) {
        const title = titleMatch[1].trim();
        
        if (isTechNews(title) && title.length > 10 && title.length < 200) {
          news.push({
            title: title,
            link: 'https://bluescreen.kz/',
            source: 'Blue Screen',
            timestamp: new Date().toISOString(),
            description: ''
          });
        }
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
    return news.slice(0, 10);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Blue Screen:', error);
    return [];
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç—å–∏ Blue Screen
function extractNewsFromBlueScreenArticle(articleHtml) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleMatch = articleHtml.match(/<h[1-6][^>]*>([^<]+)<\/h[1-6]>/i) ||
                      articleHtml.match(/<a[^>]*>([^<]+)<\/a>/i);
    const title = titleMatch ? titleMatch[1].trim() : '';
    
    if (!title || title.length < 10) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
    const linkMatch = articleHtml.match(/<a[^>]+href=["']([^"']+)["'][^>]*>/i);
    const link = linkMatch ? linkMatch[1] : '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    const descMatch = articleHtml.match(/<p[^>]*>([^<]+)<\/p>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*excerpt[^"']*["'][^>]*>([^<]+)<\/div>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*summary[^"']*["'][^>]*>([^<]+)<\/div>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*content[^"']*["'][^>]*>([^<]+)<\/div>/i);
    const description = descMatch ? descMatch[1].trim() : '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
    const dateMatch = articleHtml.match(/<time[^>]*>([^<]+)<\/time>/i) ||
                     articleHtml.match(/<span[^>]*class=["'][^"']*date[^"']*["'][^>]*>([^<]+)<\/span>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*published[^"']*["'][^>]*>([^<]+)<\/div>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*time[^"']*["'][^>]*>([^<]+)<\/div>/i);
    const date = dateMatch ? dateMatch[1].trim() : '';
    
    return {
      title: title,
      link: link || 'https://bluescreen.kz/',
      source: 'Blue Screen',
      timestamp: new Date().toISOString(),
      description: description,
      date: date
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏ Blue Screen:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π
function isTechNews(title) {
  const techKeywords = [
    '—Å—Ç–∞—Ä—Ç–∞–ø', 'startup', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'investment', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'technology',
    '–ò–ò', 'AI', '–±–ª–æ–∫—á–µ–π–Ω', 'blockchain', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'crypto', '—Ñ–∏–Ω—Ç–µ—Ö', 'fintech',
    'IT', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'programming', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'development',
    '–¥–∞–Ω–Ω—ã–µ', 'data', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'machine learning', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'automation',
    '—Ä–æ–±–æ—Ç', 'robot', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', 'innovation', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π', 'IoT',
    '–æ–±–ª–∞–∫–æ', 'cloud', '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'cybersecurity', 'VR', 'AR',
    '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'mobile app', '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'web development',
    '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', 'digitalization', '—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', 'digital transformation',
    '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'kazakhstan', '–∞–ª–º–∞—Ç—ã', 'almaty', '–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω', 'nur-sultan',
    'blue screen', '–±–ª–æ–≥', 'blog'
  ];
  
  const titleLower = title.toLowerCase();
  return techKeywords.some(keyword => titleLower.includes(keyword.toLowerCase()));
}

exports.handler = async (event, context) => {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Blue Screen');
    
    const news = await parseBlueScreen();
    
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        message: 'Blue Screen parsing completed',
        timestamp: new Date().toISOString(),
        source: 'Blue Screen',
        news_count: news.length,
        news: news
      })
    };
    
  } catch (error) {
    console.error('Error parsing Blue Screen:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        error: 'Failed to parse Blue Screen',
        message: error.message
      })
    };
  }
};
