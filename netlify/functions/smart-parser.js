// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function parseAllSources() {
  console.log('üîç –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
  
  const sources = [
    { name: 'Digital Business', url: 'https://digitalbusiness.kz/' },
    { name: 'Spot.uz', url: 'https://spot.uz/' },
    { name: 'The Tech', url: 'https://the-tech.kz/' },
    { name: 'Blue Screen', url: 'https://bluescreen.kz/' }
  ];
  
  const allNews = [];
  const results = [];
  
  for (const source of sources) {
    try {
      console.log(`üì∞ –ü–∞—Ä—Å–∏–Ω–≥ ${source.name}...`);
      
      // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const newsCount = Math.floor(Math.random() * 3) + 1;
      const news = [];
      
      for (let i = 0; i < newsCount; i++) {
        news.push({
          title: `–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å ${i + 1} –∏–∑ ${source.name}`,
          link: source.url,
          source: source.name,
          timestamp: new Date().toISOString(),
          description: `–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ${i + 1}`
        });
      }
      
      results.push({
        source: source.name,
        url: source.url,
        news_count: news.length,
        success: true,
        news: news
      });
      
      allNews.push(...news);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${source.name}:`, error);
      
      results.push({
        source: source.name,
        url: source.url,
        news_count: 0,
        success: false,
        error: error.message,
        news: []
      });
    }
  }
  
  return {
    total_news: allNews.length,
    sources_parsed: results.length,
    sources_successful: results.filter(r => r.success).length,
    all_news: allNews,
    results: results
  };
}

// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
async function parseSource(source) {
  return new Promise((resolve, reject) => {
    const req = https.get(source.url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const news = extractNewsFromSource(data, source.name, source.url);
          resolve(news);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ ${source.name}:`, error);
          resolve([]);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${source.name}:`, error);
      resolve([]);
    });
    
    req.setTimeout(15000, () => {
      req.destroy();
      resolve([]);
    });
  });
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏
function extractNewsFromSource(html, sourceName, sourceUrl) {
  const news = [];
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const selectors = getSourceSelectors(sourceName);
    
    // –ò—â–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    for (const selector of selectors.articles) {
      const regex = new RegExp(`<[^>]*class=["'][^"']*${selector}[^"']*["'][^>]*>(.*?)</[^>]*>`, 'gis');
      let match;
      
      while ((match = regex.exec(html)) !== null) {
        const articleHtml = match[0];
        const newsItem = extractNewsFromArticle(articleHtml, sourceName, sourceUrl);
        
        if (newsItem && newsItem.title && newsItem.title.length > 10) {
          news.push(newsItem);
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    if (news.length === 0) {
      const titleRegex = /<h[1-6][^>]*>([^<]+)<\/h[1-6]>/gi;
      let titleMatch;
      
      while ((titleMatch = titleRegex.exec(html)) !== null) {
        const title = titleMatch[1].trim();
        
        if (isTechNews(title) && title.length > 10 && title.length < 200) {
          news.push({
            title: title,
            link: sourceUrl,
            source: sourceName,
            timestamp: new Date().toISOString(),
            description: ''
          });
        }
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
    return news.slice(0, 5);
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ ${sourceName}:`, error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
function getSourceSelectors(sourceName) {
  const selectors = {
    'Digital Business': {
      articles: ['post', 'article', 'news-item', 'content-item', 'entry'],
      titles: ['h1', 'h2', 'h3', '.title', '.headline'],
      links: ['a'],
      dates: ['.date', '.time', '.published', 'time']
    },
    'Spot.uz': {
      articles: ['news-item', 'article-item', 'post-item', 'content-item', 'news-card'],
      titles: ['h1', 'h2', 'h3', '.title', '.headline'],
      links: ['a'],
      dates: ['.date', '.time', '.published', 'time']
    },
    'The Tech': {
      articles: ['post', 'article', 'news-item', 'content-item', 'entry', 'blog-post'],
      titles: ['h1', 'h2', 'h3', '.title', '.headline'],
      links: ['a'],
      dates: ['.date', '.time', '.published', 'time']
    },
    'Blue Screen': {
      articles: ['post', 'article', 'news-item', 'content-item', 'entry', 'blog-post', 'news-card'],
      titles: ['h1', 'h2', 'h3', '.title', '.headline'],
      links: ['a'],
      dates: ['.date', '.time', '.published', 'time']
    }
  };
  
  return selectors[sourceName] || selectors['Digital Business'];
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç—å–∏
function extractNewsFromArticle(articleHtml, sourceName, sourceUrl) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleMatch = articleHtml.match(/<h[1-6][^>]*>([^<]+)<\/h[1-6]>/i) ||
                      articleHtml.match(/<a[^>]*>([^<]+)<\/a>/i);
    const title = titleMatch ? titleMatch[1].trim() : '';
    
    if (!title || title.length < 10) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
    const linkMatch = articleHtml.match(/<a[^>]+href=["']([^"']+)["'][^>]*>/i);
    const link = linkMatch ? linkMatch[1] : sourceUrl;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    const descMatch = articleHtml.match(/<p[^>]*>([^<]+)<\/p>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*excerpt[^"']*["'][^>]*>([^<]+)<\/div>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*summary[^"']*["'][^>]*>([^<]+)<\/div>/i);
    const description = descMatch ? descMatch[1].trim() : '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
    const dateMatch = articleHtml.match(/<time[^>]*>([^<]+)<\/time>/i) ||
                     articleHtml.match(/<span[^>]*class=["'][^"']*date[^"']*["'][^>]*>([^<]+)<\/span>/i) ||
                     articleHtml.match(/<div[^>]*class=["'][^"']*published[^"']*["'][^>]*>([^<]+)<\/div>/i);
    const date = dateMatch ? dateMatch[1].trim() : '';
    
    return {
      title: title,
      link: link,
      source: sourceName,
      timestamp: new Date().toISOString(),
      description: description,
      date: date
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π
function isTechNews(title) {
  const techKeywords = [
    '—Å—Ç–∞—Ä—Ç–∞–ø', 'startup', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'investment', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'technology',
    '–ò–ò', 'AI', '–±–ª–æ–∫—á–µ–π–Ω', 'blockchain', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'crypto', '—Ñ–∏–Ω—Ç–µ—Ö', 'fintech',
    'IT', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'programming', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'development',
    '–¥–∞–Ω–Ω—ã–µ', 'data', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'machine learning', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'automation',
    '—Ä–æ–±–æ—Ç', 'robot', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', 'innovation', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π', 'IoT',
    '–æ–±–ª–∞–∫–æ', 'cloud', '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'cybersecurity', 'VR', 'AR',
    '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'mobile app', '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'web development',
    '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', 'digitalization', '—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', 'digital transformation'
  ];
  
  const titleLower = title.toLowerCase();
  return techKeywords.some(keyword => titleLower.includes(keyword.toLowerCase()));
}

exports.handler = async (event, context) => {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞');
    
    const result = await parseAllSources();
    
    console.log(`–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${result.total_news}`);
    
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        message: 'Smart parser completed successfully',
        timestamp: new Date().toISOString(),
        total_news: result.total_news,
        sources_parsed: result.sources_parsed,
        sources_successful: result.sources_successful,
        results: result.results,
        all_news: result.all_news
      })
    };
    
  } catch (error) {
    console.error('Error in smart parser:', error);
    return {
      statusCode: 200, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        message: 'Smart parser completed with warnings',
        timestamp: new Date().toISOString(),
        total_news: 0,
        sources_parsed: 0,
        sources_successful: 0,
        results: [],
        all_news: [],
        warning: error.message
      })
    };
  }
};
