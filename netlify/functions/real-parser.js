const https = require('https');
const { checkAuth } = require('./auth-middleware');

// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ JavaScript
async function parseNewsFromSite(url, sourceName) {
  return new Promise((resolve, reject) => {
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
          const newsItems = [];
          
          // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
          const titleRegex = /<h[1-6][^>]*>([^<]+)<\/h[1-6]>/gi;
          const linkRegex = /<a[^>]+href=["']([^"']+)["'][^>]*>([^<]+)<\/a>/gi;
          
          let match;
          const titles = [];
          const links = [];
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
          while ((match = titleRegex.exec(data)) !== null) {
            const title = match[1].trim();
            if (title.length > 10 && title.length < 200) {
              titles.push(title);
            }
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
          while ((match = linkRegex.exec(data)) !== null) {
            const link = match[1];
            const linkText = match[2].trim();
            if (linkText.length > 10 && linkText.length < 200) {
              links.push({ url: link, text: linkText });
            }
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
          titles.slice(0, 5).forEach((title, index) => {
            if (isTechNews(title)) {
              newsItems.push({
                title: title,
                link: links[index] ? links[index].url : url,
                source: sourceName,
                timestamp: new Date().toISOString()
              });
            }
          });
          
          resolve(newsItems);
        } catch (error) {
          console.error('Error parsing HTML:', error);
          resolve([]);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('Error fetching URL:', error);
      resolve([]);
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      resolve([]);
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π
function isTechNews(title) {
  const techKeywords = [
    '—Å—Ç–∞—Ä—Ç–∞–ø', 'startup', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'investment', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'technology',
    '–ò–ò', 'AI', '–±–ª–æ–∫—á–µ–π–Ω', 'blockchain', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'crypto', '—Ñ–∏–Ω—Ç–µ—Ö', 'fintech',
    'IT', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'programming', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'development',
    '–¥–∞–Ω–Ω—ã–µ', 'data', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'machine learning', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'automation',
    '—Ä–æ–±–æ—Ç', 'robot', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', 'innovation', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π', 'IoT',
    '–æ–±–ª–∞–∫–æ', 'cloud', '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'cybersecurity', 'VR', 'AR'
  ];
  
  const titleLower = title.toLowerCase();
  return techKeywords.some(keyword => titleLower.includes(keyword.toLowerCase()));
}

exports.handler = async (event, context) => {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authError = checkAuth(event);
    if (authError) return authError;
    
    const botToken = process.env.BOT_TOKEN;
    const moderationGroupId = process.env.MODERATION_GROUP_ID;
    
    if (!botToken) {
      return {
        statusCode: 500,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        },
        body: JSON.stringify({
          error: 'BOT_TOKEN not found in environment variables'
        })
      };
    }
    
    // –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const sources = [
      { url: 'https://digitalbusiness.kz/', name: 'Digital Business' },
      { url: 'https://spot.uz/', name: 'Spot.uz' },
      { url: 'https://the-tech.kz/', name: 'The Tech' },
      { url: 'https://bluescreen.kz/', name: 'Blue Screen' }
    ];
    
    let allNews = [];
    
    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    for (const source of sources) {
      try {
        console.log(`–ü–∞—Ä—Å–∏–Ω–≥ ${source.name}...`);
        const news = await parseNewsFromSite(source.url, source.name);
        allNews = allNews.concat(news);
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${news.length} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ ${source.name}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${source.name}:`, error);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
    const message = `üîç <b>–ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù</b>\n\n` +
                   `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                   `üë§ –ó–∞–ø—É—â–µ–Ω–æ: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n` +
                   `üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Netlify Functions\n` +
                   `üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${allNews.length}\n` +
                   `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`;
    
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const postData = JSON.stringify({
      chat_id: moderationGroupId,
      text: message,
      parse_mode: 'HTML'
    });
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };
    
    return new Promise((resolve, reject) => {
      const req = https.request(telegramUrl, options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          console.log('Parser notification sent:', data);
          
          resolve({
            statusCode: 200,
            headers: {
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
              message: 'Real parser completed successfully!',
              timestamp: new Date().toISOString(),
              new_news_count: allNews.length,
              parsed_news: allNews,
              sources_checked: sources.length
            })
          });
        });
      });
      
      req.on('error', (err) => {
        console.error('Request error:', err);
        reject({
          statusCode: 500,
          headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          },
          body: JSON.stringify({
            error: 'Failed to send parser notification',
            message: err.message
          })
        });
      });
      
      req.write(postData);
      req.end();
    });
    
  } catch (error) {
    console.error('Error in real parser:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        error: 'Failed to run real parser',
        message: error.message
      })
    };
  }
};
